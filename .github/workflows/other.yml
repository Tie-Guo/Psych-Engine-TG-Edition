name: Other Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  BuildWindows:
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5
      
      - name: Restore Previous Cache
        id: cache-debug-build-windows-restore
        uses: actions/cache/restore@main
        with:
          path: |
            .haxelib
            export/windows/haxe
            export/windows/obj
          key: cache-windows-build

      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp 4.2.1 > /dev/null
          haxelib install lime
          haxelib install openfl
          haxelib install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git hxCodec https://github.com/polybiusproxy/hxCodec
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit
          haxelib install hscript
          haxelib git SScript https://github.com/SScript-Guy/SScript-new
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Setup Lime
        run: |
          haxelib run lime setup -alias -y
          haxelib set hxcpp 4.2.1
          haxelib set hxCodec 2.5.1
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"
     
      - name: Clear Previous Cache
        uses: actions/github-script@main
        with:
          script: |
            try {
            	const caches = await github.rest.actions.getActionsCacheList({
            		owner: context.repo.owner,
            		repo: context.repo.repo,
            	})

            	if (typeof caches.data.actions_caches != null && caches.data.actions_caches.length > 0) {
            		for (const cache of caches.data.actions_caches) {
            			if (cache.key == "cache-windows-build") {
            				console.log('Clearing ' + cache.key + '...')
            				await github.rest.actions.deleteActionsCacheById({
            					owner: context.repo.owner,
            					repo: context.repo.repo,
            					cache_id: cache.id,
            				})
            				console.log("Previous Cache Cleared!")
            			}
            		}
            	}
            } catch (error) {
            	console.log(error.message)
            }

      - name: Save Current Cache
        id: cache-release-build-windows-save
        uses: actions/cache/save@main
        with:
          path: |
            .haxelib
            export/windows/haxe
            export/windows/obj
          key: cache-windows-build
          
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: Windows
          path: export/release/windows/bin
  buildLinux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5
      # Runs a set of commands using the runners shell
      - name: Restore Previous Cache
        id: cache-build-restore
        uses: actions/cache/restore@main
        with:
          path: |
            .haxelib
            export/linux/haxe
            export/linux/obj
          key: cache-linux-build
      
      - name: Install Haxelib
        run: |
          sudo apt-get install libvlc-dev
          sudo apt-get install libvlccore-dev
          haxelib install hxcpp > /dev/null --quiet
          haxelib setup ~/haxelib
          haxelib install lime
          haxelib install openfl
          haxelib install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git hxCodec https://github.com/polybiusproxy/hxCodec
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit
          haxelib install hscript
          haxelib git SScript https://github.com/SScript-Guy/SScript-new
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}"
      
      - name: Clear Previous Cache
        uses: actions/github-script@main
        with:
          script: |
            try {
            	const caches = await github.rest.actions.getActionsCacheList({
            		owner: context.repo.owner,
            		repo: context.repo.repo,
            	})

            	if (typeof caches.data.actions_caches != null && caches.data.actions_caches.length > 0) {
            		for (const cache of caches.data.actions_caches) {
            			if (cache.key == "cache-linux-build") {
            				console.log('Clearing ' + cache.key + '...')
            				await github.rest.actions.deleteActionsCacheById({
            					owner: context.repo.owner,
            					repo: context.repo.repo,
            					cache_id: cache.id,
            				})
            				console.log("Previous Cache Cleared!")
            			}
            		}
            	}
            } catch (error) {
            	console.log(error.message)
            }

      - name: Save Current Cache
        id: cache-build-save
        uses: actions/cache/save@main
        with:
          path: |
            .haxelib
            export/linux/haxe
            export/linux/obj
          key: cache-linux-build
          
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: Linux
          path: 'export/release/linux/bin'
  buildMac:
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.5
        
      - name: Restore Previous Cache
        id: cache-build-restore
        uses: actions/cache/restore@main
        with:
          path: |
            .haxelib
            export/macos/haxe
            export/macos/obj
          key: cache-macos-build

      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install lime
          haxelib install openfl
          haxelib install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git hxCodec https://github.com/polybiusproxy/hxCodec
          haxelib git linc_luajit https://github.com/Sirox228/linc_luajit
          haxelib install hscript
          haxelib git SScript https://github.com/SScript-Guy/SScript-new
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build mac --app-version="4.0.0-${{ github.run_id}}"
      - name: Clear Previous Cache
        uses: actions/github-script@main
        with:
          script: |
            try {
            	const caches = await github.rest.actions.getActionsCacheList({
            		owner: context.repo.owner,
            		repo: context.repo.repo,
            	})

            	if (typeof caches.data.actions_caches != null && caches.data.actions_caches.length > 0) {
            		for (const cache of caches.data.actions_caches) {
            			if (cache.key == "cache-macos-build") {
            				console.log('Clearing ' + cache.key + '...')
            				await github.rest.actions.deleteActionsCacheById({
            					owner: context.repo.owner,
            					repo: context.repo.repo,
            					cache_id: cache.id,
            				})
            				console.log("Previous Cache Cleared!")
            			}
            		}
            	}
            } catch (error) {
            	console.log(error.message)
            }

      - name: Save Current Cache
        id: cache-build-save
        uses: actions/cache/save@main
        with:
          path: |
            .haxelib
            export/macos/haxe
            export/macos/obj
          key: cache-macos-build
          
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: macBuild
          path: export/release/macos/bin
